FROM composer:2.8 AS composer

# Set working directory
WORKDIR /app

# Copy composer.json and composer.lock
COPY . .

# Install dependencies
RUN composer install --no-dev --optimize-autoloader

FROM php:8.1-fpm
# FROM node:20

# Copy composer.lock and composer.json
#COPY composer.lock composer.json /var/www/

# Set working directory
WORKDIR /var/www

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpng-dev \
    libjpeg62-turbo-dev \
    libfreetype6-dev \
    locales \
    libzip-dev \
    zip \
    jpegoptim optipng pngquant gifsicle \
    vim \
    unzip \
    git \
    curl \
    libmagickwand-dev --no-install-recommends && rm -rf /var/lib/apt/lists/*


# RUN apt-get update && apt-get install -y \
#     curl

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install extensions
RUN docker-php-ext-install pdo_mysql zip exif pcntl sockets && docker-php-ext-enable sockets
RUN docker-php-ext-configure gd --with-freetype=/usr/include/ --with-jpeg=/usr/include/
RUN docker-php-ext-install gd

#opcache
RUN docker-php-ext-configure opcache --enable-opcache \
    && docker-php-ext-install opcache

# imagick php extension
RUN pecl install imagick && docker-php-ext-enable imagick

# set env TERM=linux
# ENV TERM linux

# Install composer
# RUN bash -c "$(curl -fsSL https://php.new/install/linux)"

# Copy existing application directory contents
COPY . /var/www

RUN chown -R www-data:www-data /var/www/
# USER www-data
# RUN npm install && npm run build

# Copy the vendor directory from the composer stage
COPY --from=composer /app/vendor ./vendor


EXPOSE 9000
CMD ["php", "artisan", "migrate", "&&", "vite", "run", "preview"]
# CMD ["php-fpm"]